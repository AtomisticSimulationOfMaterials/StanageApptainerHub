# INSTRUCTIONS
# 1. Build the image:
#    apptainer build lammps.sif lammps.def
#
# 2. Build the image with full debug log (for troubleshooting):
#    apptainer build --disable-cache lammps.sif lammps.def > build_lammps.log
#
# 3. Run the image interactively (shell into it):
#    apptainer shell lammps.sif
# 
# 4. Run lammps from the image (non-interactively)
#    

Bootstrap: docker
From: nvidia/cuda:12.5.1-devel-ubuntu24.04

%labels
    Author Ethan L. Edmunds
    Version v1.0
    Description LAMMPS CPU MPI container based on base.sif

%post
    # Set noninteractive frontend
    export DEBIAN_FRONTEND=noninteractive

    # Install dependencies needed to build LAMMPS
    apt-get update && \
    apt-get install -y --no-install-recommends \
    cmake \
    git \
    g++ \
    python3 \
    python3-dev \
    python3-pip \
    python3-venv \
    wget \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

    # Create python venv
    python3 -m venv /opt/venv
    export PATH="/opt/venv/bin:$PATH"

    # Upgrade pip
    /opt/venv/bin/pip install --upgrade pip

    # Install any Python packages you want inside the venv
    /opt/venv/bin/pip install numpy scipy mpi4py pandas ase matscipy atomman cython 

    # Clone LAMMPS develop branch, tag stable_22Jul2025
    git clone --branch release https://github.com/lammps/lammps.git /opt/lammps
    cd /opt/lammps
    git fetch --tags
    git checkout tags/stable_22Jul2025

    # Create build directory
    mkdir build && cd build

    ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 || true

    # Make stubs available to the linker during build
    export LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LIBRARY_PATH}
    export LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH}

    # CMake options for LAMMPS build (change if you'd like)
    cmake ../cmake \
        -D CMAKE_CXX_COMPILER=/opt/lammps/lib/kokkos/bin/nvcc_wrapper \
        -D CMAKE_BUILD_TYPE=Release \
        -D BUILD_MPI=on \
        -D PKG_KOKKOS=yes \
        -D Kokkos_ENABLE_SERIAL=ON \
        -D Kokkos_ARCH_AMPERE80=yes \
        -D BUILD_SHARED_LIBS=yes \
        -D BUILD_OMP=ON \
        -D Kokkos_ENABLE_CUDA=yes \
        -D CMAKE_INSTALL_PREFIX=$VIRTUAL_ENV \
        -D PACELIB_MD5=$(md5sum libpace.tar.gz | awk '{print $1}') \
        -D PKG_ML-UF3=yes \
        -D PKG_ML-PACE=yes \
        -D PKG_ML-SNAP=yes \
        -D PKG_REPLICA=yes \
        -D PKG_MANYBODY=yes \
        -D PKG_PYTHON=yes \
        -D python_EXECUTABLE="\opt\venv\bin\python3"
        
        # Build and install lammps
        cmake --build . -j 20 
        cmake --install . 

        # Install Python bindings
        cd /opt/lammps/python
        /opt/venv/bin/pip install .


%environment

    export PATH="/opt/venv/bin:$PATH"

    # export LIBRARY_PATH="/usr/local/cuda/lib64/stubs:${LIBRARY_PATH}"
    # export LD_LIBRARY_PATH="/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH}"

    export PATH="/opt/venv/bin:$PATH"

%runscript
    echo "This container runs LAMMPS with MPI and KOKKOS support."
    echo "Usage example: lmp -in input_script.in"
    exec /opt/lammps/build/lmp "$@"